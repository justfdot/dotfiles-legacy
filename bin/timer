#!/usr/bin/env python

import sys
import re
from os import system as os_system
from time import (sleep as time_sleep,
                  localtime as time_localtime,
                  strftime as time_strftime)
from termcolor import colored


class Timer:

    def __init__(self, time, message='OK, timer has been completed'):
        if time == 'coffee':
            self.make_coffee()
        else:
            self.set(self.parse_time(time), message)

    @property
    def amount(self):
        return self._amount

    @amount.setter
    def amount(self, amount):
        self._amount = int(amount)

    @property
    def unit(self):
        return self._unit

    @unit.setter
    def unit(self, unit):
        UNITS = {
            's': {'multiplier': 1,    'name': 'second'},
            'm': {'multiplier': 60,   'name': 'minute'},
            'h': {'multiplier': 3600, 'name': 'hour'}}
        self._unit = UNITS[unit]['name']
        if self.amount > 1:
            self._unit += 's'
        self.multiplier = UNITS[unit]['multiplier']

    def parse_time(self, time):
        parsed_time = re.match(r'(\d+)([smh])', time)
        if parsed_time is not None:
            self.amount, self.unit = parsed_time.groups()
            return {
                'seconds': self.amount * self.multiplier,
                'formatted':
                    colored('{} {}'.format(self.amount, self.unit),
                            'yellow', attrs=['bold'])}
        else:
            drop('Couldn\'t parse given argument. It should be \d+[smh]')

    def set(self, time, message):
        self.log('Timer has been set for {}'.format(time['formatted']))
        try:
            time_sleep(time['seconds'])
            self.log('Timer has been completed', True)
            os_system('notify-send -i clock "IT\'S TIME" "{}"'.format(message))
        except KeyboardInterrupt:
            self.log('Timer has been interupted by user', False)

    def make_coffee(self):
        self.log('Let\'s make some coffee')
        try:
            time_sleep(120)  # Two minutes
            self.log('The first step has been passed', True)
            os_system(('notify-send -i clock "COFFEE REMINDER" '
                       '"The first step has been passed<br>Go stir it"'))
            time_sleep(150)  # Two and a half minutes
            self.log('The second step has been passed', True)
            os_system(('notify-send -i clock "COFFEE REMINDER" '
                       '"The second step has been passed<br>'
                       'Keep an eye on it"'))
        except KeyboardInterrupt:
            self.log('We are not going to make coffee for some reasons', False)

    def log(self, message, condition=None):
        now = time_strftime('%H:%M:%S', time_localtime())
        if condition is not None:
            now = colored(now, 'green' if condition else 'red')
        print('  {}  {}'.format(now, message))


def drop(message=None, with_code=1):
    if message is not None:
        print(message)
    sys.exit(with_code)


if __name__ == '__main__':
    sys_args = sys.argv[1:]
    if not sys_args:
        drop('No arguments given')
    elif len(sys_args) > 2:
        drop('There are too many arguments. Can\'t handle it.')
    # Let's kick it
    Timer(*sys_args)
